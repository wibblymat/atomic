So, took a long break from this, learned a lot more about JavaScript. Decided some more things.

Atomic should not be single-file library. What you get should be all of the individual source files. They should be as decoupled as possible.

You will also get a yeoman generator. This will set up your project, with the Atomic stuff all in place and loadable with requirejs, grunt for linting/local server/tests/build. The build will use r.js and a minifier. The stubbed out project will have a main HTML file including a canvas. The stub will include a menu, title screen, credits and a mock-up platform game. There will also be a second, debug, HTML page. This also loads the same canvas and code but enables debug mode and adds some extra UI elements in the HTML. You should be able to pause the game (stop the main loop from doing anything) and step through frame by frame.

Nice to have would be a way to tweak graphics and maps live and have it reflected in the running game. You obviously then need to be able to save the updated resources back out. Interacting with Dropbox would be COOL.

Also, we should pitch at specifically being a game jam tool which means more opinionated and maybe less configurable in places where it helps make a particular kind of game quicker. Ultimately this is mostly for me, so add the features that I want rather than guessing at features someone else might want.

Some things aren't decided yet though. Objects/Inheritance versus Entities/Components? Code or configuration? Components and configuration seem like the best way to go for a "real" game development system, but do they make jamming easier? More investigation required. Particularly note that external configuration is meant to benefit your team mates, which you wont have in Ludum Dare.

-----------------------------------------------------------



Engine/Template design
----------------------
This document will one day evolve into the engine hacking guide, no doubt.

Features, vaguely prioritised: (Priority is for the basics of each feature, not for fully complete)
* Input
* Asset loading
* Sprite/tile sheets including animations
* Tiled maps/levels - ultimately would be nice to support several formats, but starting with Ogmo level format
* Camera - Pan, rotate, zoom, filters...? Ooh, *multiple* cameras? Allows things like a magnifying glass
* Collision - pixel and grid based hit detection
* Backdrops, possibly repeated tiles.
* Sound/Music - Panning, volume, stop, start, positioning, "sound sprites" - Web Audio API if possible, might need the SoundManager flash stuff though :(
* Debug tools - console, frame step, pluggable watch UI
* Tweening
* Game saves/storage
* Text transforms - Like tweening some text along a curved path... Also bitmap fonts
* Web fonts
* Screenshot tool
* Stuff to do with packaging for Chrome Store or similar.
* Player analytics - how long did people play, where did they die, what routes did they take? This is obviously a playtest/beta test feature but would be invaluable to developers
* Simple AI features? Path finding, sure.
* Plugin/module system. Requires a community to be worth it so don't even bother till we have something to go public with.
* Internationalisation (string localisation at least)
* Replays/demos/recordings - will need the deterministic PRNG
* Particles and emitters
* World transitions - fades/wipes/dissolves

Scaffolding:
* Menus
* Splash screens
* Pixel fonts
* Box2D?

Far off dreamland ideas:
* Bret Victor style prototyping/editing tools

Things to read:
---------------
http://backbonetutorials.com/organizing-backbone-using-modules/
http://www.abundant-music.com/
http://www.youtube.com/watch?v=HRypuCJH9OI
https://github.com/bjorn/tiled/wiki/TMX-Map-Format
http://www.khronos.org/registry/typedarray/specs/latest/
http://animation.about.com/od/flashanimationtutorials/qt/flasheasetween.htm
http://jamiethompson.co.uk/web/2008/06/17/publish-subscribe-with-jquery/
http://www.schillmania.com/projects/soundmanager2/
http://stackoverflow.com/questions/2911822/javascript-execute-a-bunch-of-asynchronous-method-with-one-callback
http://api.jquery.com/category/deferred-object/
http://www.html5rocks.com/en/tutorials/async/deferred/
http://www.youtube.com/watch?v=me3BviH3nZc
http://www.html5rocks.com/en/tutorials/file/filesystem/
http://www.html5rocks.com/en/tutorials/webgl/webgl_fundamentals/
http://www.html5rocks.com/en/tutorials/casestudies/subsonic/
http://www.html5canvastutorials.com/labs/html5-canvas-text-along-arc-path/
https://github.com/happyworm/jPlayer
http://mediaelementjs.com/
http://ejohn.org/blog/ecmascript-5-objects-and-properties/
http://stackoverflow.com/questions/4152931/javascript-inheritance-call-super-constructor-or-use-prototype-chain

Things to think about:
----------------------
Use custom events for things, so use a "frame" event so that things that happen each frame can happen, etc. Events might include switching the active world, losing focus, destroying an entity, etc.
While I am currently basing lots of API on Flashpunk, lets not forget about other game engines. Check out the docs and techniques in other game frameworks, particularly HTML5 ones (some listed below).
Don't worry too much about supporting things that aren't the latest version of chrome to start off with. Get it working, then refactor when testing in other browsers.
iPhone/Android support would be nice I guess, but it is NOT a target of this project. Chrome web store is, though.
Have to make decisions about which parts of the engine are static/global and which things are classes or just local objects
Have a fullscreen mode. Find a way to have the resolution of the game be independent of the size of the canvas without the interpolation problem.
Can we do anything to help people working with international keyboards? Give help on picking alternatives to WASD for example?
Maybe re-think the no smartphones/tablets thing in the overview. Touch events aren't hard to add to the engine (though maybe hard to add to a game well). Hmm, ponder. I think that ignoring non-left mouse clicks is probably the right thing to do though.
For performance, pre-draw tiled backgrounds to a larger canvas when the level starts and then just move that around. Also, mutiple canvases, perhaps one per layer. Only redraw layers that change. Only redraw *parts* of layers that change, even. Animated backgrounds will be lower performance of course, but we knew that.
Or, remember that we can do 2D in webgl and use the graphics card.
When loading an Ogmo level (or potentially other XML files), rather than writing the XML file to the filesystem cache, write the converted JSON instead to save doing again.
A constructor that returns a new object rather than manipulating "this" cannot be subclassed in the same way. Calling the super constructor with the subclasses context wont have the right effect.
I've used some css colour attributes in my code, and FP uses integer colour values... Be consistent, not sure which to choose though.
I wonder if we can make the tween class work independently of Atomic? Just the time elapsed and event trigger...
Collisions... use quad trees. Detect the "passed right through" type of collision (items never overlap). Maybe make it so that a graphic can have a hit mask (like a TileMap) which can be checked if the entity doesn't have one.
Bit of a verbosity issue. Atomic.Assetmanager.assets["image/player"] is tooo long!
Thinking about it, I can probably live without jquery, which is 7 or 8 times as big as my whole library... We only use it for event handling. Look at pubsub.js
How to make Atomic more JSish. Don't require inheritance. You can do var level = new Atomic.World; level.update(myUpdateFunc); level.draw(myDrawFunc); instead - add a callback to an event handler, like jquery's $(foo).click();
Entities need to have click(), mouseover(), etc. event hooks.

Error handling EVERYWHERE.

Other frameworks to investigate:
--------------------------------
http://flashpunk.net/docs/
http://impactjs.com/documentation
http://craftyjs.com/api/
http://limejs.digitalfruit.ee/docs/
http://www.melonjs.org/docs/
http://flixel.org/docs/
http://alleg.sourceforge.net/a5docs/refman/index.html
http://api.gamvas.com/files/gamvas-base-js.html
http://storymoto.gamamoto.com/StorymotoUserGuide.htm
https://love2d.org/wiki/love
http://cocos2d.org/doc.html

Decisions made:
---------------
Timing is done in floating point milliseconds using the Web Timing API. Atomic.elapsed tells you how long passed between the start of the previous frame and the start of this one.

Version 1.0 will fully support the most recent stable version of each of most used desktop browsers - Chrome, Internet Explorer, Firefox, Opera and Safari. There will be no attempt to support anything else, including older versions of these browsers.

Early (pre 1.0) versions will only support the latest stable release of Chrome.

The library is released under a 2-clause BSD license (The "Simplified BSD License").

The library is built with requireJS, but will not force the end user to use it. For details of how, see https://github.com/requirejs/example-libglobal

ECMAScript 5 is very well supported on modern browsers so you we will use those features without worrying about fallback or compatibility.

Documentation
=============

This is a mixed bag of stuff. Some things are written as end user documentation, giving the feel of how it will be used. Some is guidance for hackers on the library. And there are also some vague ideas about how a feature might work or be implemented. I have put a note on the section headings describing the approximate type of the section.

	Hacking - About how things are implemented and the reasons for it.
	User - End user documentation.
	Design - Rough notes to guide the initial implementation.


Overview (Hacking/User)
--------
This library/framework is designed to help build 2D games using javascript and HTML5 for modern web browsers. There are some key goals:

	*	Quick to prototype a new idea.
	*	Simple to extend per-project.
	*	Cover all of the basic functionality required for games.
	*	Abstract away the details of HTML5. The API is about games.
	*	Support a wide variety of up-to-date browsers.
	*	Not interfere with any other libraries the user wants to use.
	*	Perform reasonably well
	*	Convention over configuration

These things are not goals
	*	Totally optimised performance
	*	Support older browsers
	*	Support for smartphones, tablets or other non-desktop platforms
	*	Being small

Anything on the second list that we do achieve is all to the good, we just wont be spending any extra effort to do so.

During this pre-release phase "older browser" is everything except the latest major version of Chrome, though we should not do anything that we already know will break in Firefox or Internet Explorer if we can avoid it.

To keep the scope of the project small and keep the number of configurable options low, there are two other implicit items on these lists. The goals really include "Things that I want the framework to do" and the non-goals include "Things I wouldn't use myself". By making the framework extendable we can hopefully accomodate everyone without adding too much to the core.

Getting Started (User)
---------------
(TODO: This is outdated now)
Here is the project layout convention:
/project
	/assets
		/spritemaps
		/sounds
		/videos
		/levels
	/libs
		/atomic
		[Things like jquery and other js libs]
	/js
		main.js
		[All of your own JS code goes in here]
	index.html [Could be called something else. The page for the game.]

The library does not care about the location of anything else. Feel free to put CSS or other pages for your site wherever you like. The important thing is the location of the assets, libs and js folders relative to the game HTML file.

At minimum the index.html should be

	<!DOCTYPE html>
	<script src="libs/atomic/Atomic.js"></script>

You could add a <div id="stage"></div> if you wanted to control the container in which we will place the canvas element.

When the Atomic.js script loads it will first load all of its dependencies (which will be none in the minified version) and then load js/main.js - the entry point for your game.

A minimal main.js would look like

	Atomic.init();

Which would simply create a default 640 by 480 pixel canvas element and start the engine ticking - though we haven't yet told the engine what to do.

Input (User)
-----
For keyboard and mouse input you will use the Atomic.Input object and the Atomic.Key utility constants.

Only the left mouse button is handled; the others are ignored.

Atomic.Input provides the following properties

	lastKey:string - The name of the last key that was pressed
	mouseUp:boolean - If the mouse button is NOT being held
	mouseDown:boolean - If the mouse button is being held
	mousePressed:boolean - If the mouse was pressed this frame
	mouseReleased:boolean - If the mouse was released this frame
	mouseWheel:boolean - If the mouse wheel was scrolled this frame
	mouseWheelDelta:boolean - How far the wheel was scrolled this frame
	mouseX:int - X coordinate of current mouse position
	mouseY:int - Y coordinate of current mouse position

If the mouse leaves the game area mouseX and mouseY will report the last known position.

Atomic.Input also provides these methods

	check(name:string):boolean - If the named input is held
	clear() - Clears information about which keys/buttons are currently held
	define(name:string, key1:string, ..., keyn:string) - Assigns the given name to the set of keys
	keys(name:string):string[] - Returns the names of the keys assigned to the name
	pressed(name:string):boolean - If the named input was pressed this frame
	released(name:string):boolean - If the named input was released this frame

By default, input names are mapped to the key of the same name. Key names are defined in the Atomic.Key object.

	Atomic.Input.define("Jump", "UP_ARROW", "W");
	if(Atomic.Input.check("LEFT_ARROW"))
	{
		// Do something if left arrow held
	}
	else if(Atomic.Input.pressed("Jump"))
	{
		// Do a jump if up arrow or W were pressed
	}

The special input name "ANY" can be used to detect key states without caring which one.


Asset Loader (Design)
------------
I would like to be able to do something like:

	Atomic.Assets.load({
		spritemaps: {sprites: "images/sprites.png", tiles: "images/tiles.png"},
		sounds: {dead: "sounds/dead.wav", jump: "sounds/jump.wav"},
		levels: {1: "levels/level1.tmx", 2: "levels/level2.tmx"}
	});

And then to access them as Atomic.Assets.spritemaps.sprites and have it be a Spritemap object (for e.g.)

Or even, going with a convention...

	Atomic.Assets.load({
		spritemaps: ["sprites", "tiles"},
		sounds: ["dead", "jump"],
		levels: [1, 2]
	});

(How would you deal with sprite size for a spritemap? Option on loading? Set it on the spritemap after loading? Hmm.)

and you would know the path and file extensions to look for (even having audio fallback types work automatically depending on supported formats...)

But most importantly this should be asynchronous, I should be able to determine loading progress and it should trigger Atomic.ready() when everything is loaded.

Resources about asset management and preloading:
	http://smus.com/game-asset-loader/
	http://www.html5rocks.com/en/tutorials/games/assetmanager/
	http://www.html5rocks.com/en/tutorials/casestudies/subsonic/
	http://thinkpixellab.com/pxloader/

